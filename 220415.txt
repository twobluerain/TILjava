1교시 
StringTokenizer;

package day08.code;

import java.util.StringTokenizer;

public class StringTokenizerEx {

  public static void main(String[] args) {

    StringTokenizer st = new StringTokenizer("홍길동.장화.홍련.콩쥐.팥쥐", ".");// 구분자로 / 사용
    while (st.hasMoreElements())
      System.out.println(st.nextToken());
  }
}

 

논리연산자 비교
package day08.code;

class Point {
  int x, y;

  public Point(int x, int y) {
    this.x = x;
    this.y = y;
  }

  public boolean equals(Point p) {
    if (x == p.x && y == p.y)
      return true;
    else
      return false;
  }
}

public class ObjectProperty {
  public static void main(String[] args) {
    Point a = new Point(2, 3);
    Point b = new Point(2, 3);
    Point c = new Point(3, 4);
    if (a == b) // false
      System.out.println("a==b");
    if (a.equals(b)) // true
      System.out.println("a is equal to b");
    if (a.equals(c)) // false
      System.out.println("a is equal to c");
}
}
Interface

   - 상수와 추상 메소드로만 이루어져 있습니다.
     메소드의 내용을 정의하는 "{}" 없습니다. 
   - 추상 메소드에 abstract를 사용하지 않아도 됩니다.
   - 모든 추상 메소드 앞에 public으로 가정합니다.
   - 추상메소드를 사용하는 이유는 앞으로 추가되거나 구현되어야하는 기능 
    의 설계 역활을 하며 실제 기능은 구현하지 않고 메소드 원형만 구현 
     하는 것을 말합니다. 
   - 추상 메소드는 건축물에서 구조를 이루는 철근과도 같고 설계도와 같은  
     역할을 합니다. 
     - 외부에 공개할 메소드를 등록하는 목적으로도 사용됩니다. 
   - 인터페이스를 구현한  클래스는 인터페이스상에 있는 추상 메소드를 전부  
     구현해야 합니다. 
   - 인터페이스상에 있는 메소드를 하나라도 구현하지 않으면 인터페이스를  
     구현하는 클래스는 추상클래스가 됩니다.  
   - A a_obj = new A(); 인터페이스는 객체를 만들 수 없습니다. 따라서 반드시  
     그 인터페이스를 구현한 클래스의 객체를 생성해서 사용합니다. 
     A memo;            // A인터페이스형 참조 변수 memo 선언 
     memo = new C1();   // C1은 A라는 인터페이스를 전부 구현한 클래스입니다. 

 

2교시
Interface

package day08;

interface Inter {
  int add(int i, int j);

  int sub(int i, int j);
}

public class InterImpl implements Inter {

  public static void main(String[] args) {
    InterImpl i = new InterImpl();
    System.out.println(i.add(10, 5));
    System.out.println(i.sub(10, 5));

    //Inter inter = new Inter(); 추상클래스처럼 객체 생성은 되지 않는다.
    Inter i2 = new InterImpl();
    System.out.println(i2.add(12, 4));
    System.out.println(i2.sub(12, 4));
    
  }

  @Override
  public int add(int i, int j) {
    return i + j;
  }

 @Override
  public int sub(int i, int j) {
    return i - j;
  }
}

 

package day08;

interface Myinfointer {
  public String getName();

  public String getPhone();

  public String getAddress();

  public int getAge();

}

class Myinfo implements Myinfointer {
  private String name;
  private String phone;
  private String address;
  private int age;

  Myinfo() {
  }

  Myinfo(String name, String phone, String address, int age) {
    this.name = name;
    this.phone = phone;
    this.address = address;
    this.age = age;
  }

  public String getName() {
    return name;
  }

  public String getPhone() {
    return phone;
  }

  public String getAddress() {
    return address;
  }

  public int getAge() {
    return age;
  }
}

public class Myinfouse {

  /**
   * @param args
   */
  public static void main(String[] args) {
    Myinfointer info = new Myinfo("개구리", "010-1234-5678", "서울 광진구", 20);
    System.out.println("이름:" + info.getName());
    System.out.println("전화:" + info.getPhone());
    System.out.println("주소:" + info.getAddress());
    System.out.println("나이:" + info.getAge());
  }
}

3교시
예외처리

  - 예외는 프로그램 개발시에 발생하는 에러와 다릅니다. 

   - 안정적으로 컴파일된 후 운영중에 발생하는 에러는 대부분 "예외"인 경우가 
     많습니다. 예외는 코드상에서 발생하는 에러하고는 다르며 컴파일시에는 
     에러가 발생하지 않습니다. 마치 디스켓을 읽어오는 프로그램이 있다면 
     디스켓이  없는 상태에서 읽기 기능을 작동하여 발생하는 에러와 같은  
     것입니다. 

   - 예외 처리를 하면 예외가 발생되서 프로그램이 끝나는 것이 아니라 나머지  
     루틴이 정상적으로 실행이 됩니다. 

package day08;
public class ExceptionError1 { 
  public static void main(String args[]) { 
  
   try { 
      System.out.println("매개변수로 받은 두 개의 값"); 
      int a = Integer.parseInt(args[0]);    // 문자열 값을 정수로 변환 
      int b = Integer.parseInt(args[1]); 
      System.out.println(" a = " + a + " b = " + b ); 
      System.out.println(" a를 b로 나눈 몫 = " + (a/b) ); 
      System.out.println("나눗셈이 원할히 수행되었습니다."); 
    } 
    catch(ArithmeticException e) { 
      System.out.println("=================================="); 
      System.out.println("ArithmeticException 처리 루틴 : "); 
      System.out.println(e + " 예외 발생"); 
    } 
    catch(ArrayIndexOutOfBoundsException e) { 
      System.out.println("=================================="); 
      System.out.println("ArrayIndexOutOfBoundsException 처리 루틴"); 
      System.out.println(e + " 예외 발생"); 
    } 
    catch(NumberFormatException e) { 
      System.out.println("=================================="); 
      System.out.println("NumberFormatException 처리 루틴"); 
      System.out.println(e + " 예외 발생"); 
    } 
    catch(Exception e) { 
        System.out.println("=================================="); 
        System.out.println("알수없는 문제가 발생했습니다."); 
        System.out.println(e.toString());         
    } 
    finally { 
      System.out.println("=================================="); 
      System.out.println("예외 처리를 끝내고 finally 블럭을 수행합니다"); 
    } 
    System.out.println("나머지 모듈 정상 작동!!!"); 
  } 
} 

 

4교시
반드시 예외처리를 지정해야 하는 경우 
   - DOC문서에서 아래와 같이 throws절이 있는 메소드는 반드시 코드를  
      try ~ catch 문안에서 사용해야 합니다.  
   - 필수적으로 예외처리를 해야 합니다. 

package day08;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Ex3 {

  public static void main(String[] args) {
    
    String ur1 = "";
    String user = "";
    String password = "";
    String driver = "";
    Connection con = null;
    try {
      Class.forName(driver);
      
      con = DriverManager.getConnection(ur1, user, password);
      
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch(Exception e) {
      e.printStackTrace();
    } finally {
      try {
        con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
  }
}

package day08.code;

public class ArrayException {

  public static void main(String[] args) {
    int[] intArray = new int[5];
    intArray[0] = 0;
    try {
      for (int i = 0; i < 5; i++) {
        intArray[i + 1] = i + 1 + intArray[i]; // i=4인 경우 예외 발생
        System.out.println("intArray[" + i + "]" + "=" + intArray[i]);
      }
    }
      catch (ArrayIndexOutOfBoundsException e) {
      System.out.println("배열의 인덱스가 범위를 벗어났습니다.");
    }
  }
}

 

5교시
package day08.code;

public class NumException {

  public static void main(String[] args) {
    String[] stringNumber = { "23", "12", "998", "3.141592" };
    try {
      for (int i = 0; i < stringNumber.length; i++) {
        int j = Integer.parseInt(stringNumber[i]); // "3.141592"에서 예외 발생
        System.out.println("숫자로 변환된 값은 " + j);
      }
    } catch (NumberFormatException e) {
      System.out.println("정수로 변환할 수 없습니다.");
    }
  }
}

 

6교시
package day04.test;

import java.text.DecimalFormat;


//인터페이스 -> 상수 : double PI, 추상 메소드 : 넓이(), 둘레(), print()
// main() -> 인터페이스 타입 업캐스팅   인터페이스 넓이 둘레 print

interface Ishape{
  double PI = 3.1415;
  double area();
  double round();
  void print();
}

class Circles implements Ishape{
  private int r;

  public Circles() {}
  public Circles(int r) {
    this.r=r;
  }
  public int getR() {
    return r;
  }
  public void setR(int r) {
    this.r = r;
  }
  public double area() {
    return r*r*Math.PI;
  }
  public double round() {
    return 2*r*Math.PI ;
  }
  public void print () {
    DecimalFormat df = new DecimalFormat("####.##");
    System.out.println("------원의 넓이와 둘레------");
    System.out.println("반지름: " + r );
    System.out.println("원의 넓이: " + df.format(area()));
    System.out.println("원의 둘레: " + df.format(round()));
  }
}
  public class Circle{
  public static void main(String[] args) {
    Ishape c = new Circles(200);
    c.print();
      
  }  
  }

 
7교시
package day08;
import java.io.IOException;
public class Ex10_08 {
public static void main(String[] args) {
String userName = "java";
 

String input = "";
int key;
try {
System.out.print("이름 ==> ");
while ((key = System.in.read()) != 13) { // 13=Enter
input += Character.toString((char) key);
}
if (userName.equals(input))
System.out.println(input + "님 어서오세요 ~~");
else
System.out.println(input + "님 등록이 안되었습니다 ~~");
} catch (IOException e) {
e.printStackTrace();
}
}
package day08;
import java.io.FileInputStream;
import java.io.IOException;
public class Ex10_09 {
public static void main(String[] args) throws IOException {
FileInputStream fis = new FileInputStream("C:\\aistudy\\java\\data1.txt");
int ch;
byte[] bt = new byte[1024];
 
// while ((ch = fis.read()) != -1)
// System.out.print((char) ch);
//
// fis.close();
int i = 0;
while ((ch = fis.read()) != -1) {
bt[i] = (byte) ch;
i++;
}
System.out.print(new String(bt));
fis.close();
}
}
}
package day08;
import java.io.FileInputStream;
import java.io.IOException;
public class Ex10_09 {
public static void main(String[] args) throws IOException {
FileInputStream fis = new FileInputStream("C:\\aistudy\\java\\data1.txt");
int ch;
byte[] bt = new byte[1024];
 
// while ((ch = fis.read()) != -1)
// System.out.print((char) ch);
//
// fis.close();
int i = 0;
while ((ch = fis.read()) != -1) {
bt[i] = (byte) ch;
i++;
}
 

System.out.print(new String(bt));
fis.close();
}
}
 

 

8교시
package day08;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

public class FileDirDemo0 {

  public static void main(String[] args) {
    BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); 
    String directory = "";
    System.out.println("디렉토리 명을 입력해 주세요");
    try {
            directory = in.readLine();
            System.out.println(directory);
    } catch (IOException e) {
      e.printStackTrace();
    }
      File f1 = new File(directory);
      
      if(f1.isDirectory()) {
        System.out.println("검색 디렉토리  "+directory);
        System.out.println("=========================");
        String s[] = f1.list();
        
        for(int i=0; i<s.length;i++) {
          File f = new File(directory+"/"+s[i]);
          if(f.isDirectory()) {
            System.out.println(s[i]+" :디렉토리");
          }else {
            System.out.println(s[i]+" :파일");
          } //if end
                    
          } //for end
    } else {
      System.out.println("지정한 "+directory+"는 디렉토리가 아닙니다.");
      
    }
  }

}