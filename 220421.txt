1교시

Process 프로세스

thread의 집합으로 하나의 exe, com, dll 프로그램 등을 말한다.

메모리를 공유할 수 없어 많이 발생하면 자원이 바닥

 

Thread 쓰레드

하나의 프로그램에서 여러 개를 동시에 처리하는 기능

많이 발생해도 자원을 공유해서 시스템에 적은 부담

준비 / 실행 / 대기 / 정지 상태가 있다.

1)단일 스레드: 
 - 하나의 프로세스가 하나의 쓰레드로 실행되는 환경을 말함.
 - main() 메소드가 대표적인 단일 스레드이며, 프로세스에서 디폴트로 할당되는 스레드이다.
 - 모든 프로세스는 최소한 하나의 쓰레드를 가지게 되며 메인 쓰레드에서 더이상
   새로운 쓰레드를 생성하지 않았다면 이 프로세스는 단일 쓰레드 환경이 된다.
2) 멀티 스레드:
 - 하나의 프로세스에 두개 이상의 쓰레드가 존재하는 것을 말함.
 - 하나의 메소드가 처리가 끝나는 것이 아니라 여러 메소드가 계속적으로 실행상태에 
   있으면서 자원을 공유하고 이용하는 처리 형태
3) 스레드의 생성 방법 
  - Thread 클래스를 상속받는 방법 
  - Runnable 인터페이스를 구현하는 방법 
   . 자바는 다중 상속이 안됨으로 클래스가 특정 클래스를 상속할 필요가 있는 경우는 반드시
     Runnable인터페이스를 구현해야 한다.  

 

 Thread 클래스를 상속받은 경우

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
package day11;
 
class MyThread extends Thread {
  private int num;
  private String name;
 
  public MyThread(String a, int b) {
    name = a;
    num = b;
  
  
  }
 
  @Override
  public void run() {
    for(int i=1; i<num; i++) {
      System.out.println(name + ":" + i);
    }
  }
}
 
public class ThreadTest1 {
 
  public static void main(String[] args) {
    MyThread t1 = new MyThread("first",21);
    MyThread t2 = new MyThread("second",21);
    MyThread t3 = new MyThread("third",21);
    
    t1.start();
    t2.start();
    t3.start();
  }
 
}
 
 
 
Runnable 인터페이스를 사용한 경우 
 - Thread 클래스외에 다른 클래스를 상속받는 경우는 Runnable 인터페이스를 사용한다.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
package day11;
class ThreadOne implements Runnable {
  private int num;
  private String name;
  public ThreadOne(String a, int b) {
    name = a;
    num = b;
  }
  @Override
  public void run() {
    for (int i = 1; i < num; i++)
      System.out.println(name + " : " + i);
  }
}
public class ThreadTest2 {
  public static void main(String[] args) {
    Thread t1 = new Thread(new ThreadOne("first", 11));
    Thread t2 = new Thread(new ThreadOne("second", 11));
    Thread t3 = new Thread(new ThreadOne("third", 11));
    t1.start();
    t2.start();
    t3.start();
  }
}
 
 
 
 

 

 

2교시

Thread와 sleep 메소드

 - sleep()를 적용한 경우 특정 스레드의 CPU자원이 집중하는 것을 막을 수 있다.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
package day11;
 
class SleepThread extends Thread {
  public SleepThread(String name) {
    setName(name);
  }
 
  public void run() {
    show();
  }
 
  public void show() {
    for (int i = 0; i < 50; i++) {
      print();
      try {
        Thread.sleep(500);// 50/1000 초
      } catch (InterruptedException ite) {
      }
    }
  }
 
  public void print() {
    System.out.print(getName());// Thread에서
  }
}
 
public class SleepThreadMain {
  public static void main(String[] args) {
    SleepThread t1 = new SleepThread("a");
    SleepThread t2 = new SleepThread("b");
    SleepThread t3 = new SleepThread("c");
    t2.setPriority(7);// 1~10 클수록 우선순의 높음
    t1.start();// t2가 t1보다 우선이지만
    try {
      t1.join();// t1을 끝낸후 t2, t3를 실행한다.
    } catch (InterruptedException ite) {
    }
    t2.start();
    t3.start();
  }
}
 
 
 
우선순위

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
package day11;
 
class RunThread4 extends Thread {
  public RunThread4(String name) {
    super(name);
  }
 
  public void run() {
    for (int i = 1; i <= 10000; i++) {
      if (i % 50 == 0)
        System.out.println("Thread [" + getName() + "] : " + i);
 
      try {
        sleep(1); // 0.001초
      } catch (InterruptedException e) {
      }
 
    }
  }
}
 
public class SchedulingTest4 {
  public static void main(String args[]) {
    Thread[] t = new RunThread4[3];
    t[0] = new RunThread4("☆");
    t[1] = new RunThread4("★");
    t[2] = new RunThread4("○");
    t[0].start();
    t[0].setPriority(1);
    t[1].start();
    t[1].setPriority(1);
    t[2].start();
    t[2].setPriority(10);
    /*
     * System.out.println("t[0]" + t[0].getPriority()); System.out.println("t[1]" +
     * t[1].getPriority()); System.out.println("t[2]" + t[2].getPriority());
     */
  }
}
 
 
7. 내부 클래스를 이용하여 스레드 구현
 - 클래스 안에 선언된 클래스를 내부 클래스(inner class)라 한다.
 - 클래스안의 메소드에 선언된 것을 지역 내부 클래스(local inner class)라고 한다.
 - main()안에서 선언된 class는 main() 메소드 안에서만 사용할 수 있고 외부에서는
   사용할 수 없다.
 - 내부 클래스는 컴파일된 후에 '외부클래스이름$내부클래스이름.class' 형식으로
   바이트 코드가 생성된다.

(1) 스레드로 3대의 자동차 작동하기

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
package day11;
 
public class Ex14_08 {
  public static void main(String[] args) {
 
    class Goal extends Thread {
      String Name;
 
      Goal(String Name) {
        this.Name = Name;
      }
 
      public void run() {
        for (int i = 0; i < 200; i++) {
          try {
            Thread.sleep(10);
            System.out.println(Name + "선수의 골 입니다.");
 
          } catch (Exception e) {
          }
        }
      }
    }
 
    Goal kor = new Goal("대한민국 손흥민");
    kor.start();
 
    Goal prt = new Goal("포르투갈 호날두");
    prt.start();
 
    Goal ury = new Goal("우루과이 수아레즈");
    ury.start();
  }
}
 
 
(2) Runnable 인터페이스로 3대의 자동차 작동하기

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
package day11;
 
public class Ex14_09 {
 
  public static void main(String[] args) {
    class Goal {
      String Name;
    }
 
    class Nice extends Goal implements Runnable {
      Nice(String Name) {
        this.Name = Name;
      }
 
      public void run() {
        for (int i = 0; i < 50; i++) {
          try {
            Thread.sleep(10);
            System.out.println(Name + "선수의 골 입니다.");
 
          } catch (Exception e) {
          }
        }
      }
    }
 
    Nice kor = new Nice("대한민국 손흥민");
    Thread kor1 = new Thread(kor);
    kor1.start();
 
    Nice prt = new Nice("포르투갈 호날두");
    Thread prt1 = new Thread(prt);
    prt1.start();
 
    Nice ury = new Nice("우루과이 수아레즈");
    Thread ury1 = new Thread(ury);
    ury1.start();
  }
}
 
 
 

3교시

NETWORK 이론

1. Intranet / Internet의 구분 
 - ROUTER를 기준으로 안쪽을 Intranet, 외부를 Internet이라고 합니다.

PC - NIC - HUB - ROUTER - INTERNET - SERVER(WEB/FTP/DB)

 

2. IP and Port의 이해 

   IP Address. . . .  . : 172.16.203.31
   - 접속 위치를 나타내는 프로토콜
   - IP는 항구와 같은 위치 정보에 해당하며 컴퓨터를 구분하는 용도로 사용.
   - Port는 항구에서 짐을 싫어 나르는 부두(port)와 같으며 네트워크로 접속되는 지점
   - 하나의 IP에 할당된 여러개의 네트워크 프로그램을 구분하는 용도로 사용.
   - 하나의 포트는 하나의 프로그램과 매핑(연결)됨
   - IP 하나당 사용 가능한 포트 : 0 ~ 65535 (2Byte)
   - 알려진 사용할 수 없는 포트
     20, 21 : FTP, 파일 전송
     22 : Secure Shell 접속
     23 : Telnet, 원격 접속
     25 : SMTP, 메일 전송
     80 : HTTP, Apache, IIS등 웹서버, 인터넷 웹 페이지 서비스
     3306 : MySQL 기본 포트, DBMS
     1521 : Oracle 기본 포트, DBMS
     8080 : Apache, 기타 웹 서버
     1433 : MS-SQL 기본 포트, DBMS
    - 1500번 이하는 시스템이 사용하는 포트가 많음으로 1500번 이상 사용을 권장함.

 

3. 네트워크를 지원하는  java.net 패키지의 기본클래스 
  - URL 클래스 
   . URL 클래스는 웹상에 존재하는 자원에 접근하거나 네트웍상의 유일한 주소를 나타내기 위한
   방법을 제공하며, 또한 위치정보를 관리하기 위한 클래스 이다.  
  . 해당 위치에 스트림을 개설할 수 있다.(openStream() 이용) 

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
package day11;
 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
 
public class URLtest {
 
  public static void main(String[] args) {
    try {
      URL url = new URL("https://www.naver.com");
      System.out.println("Port: " + url.getPort());
      System.out.println("Protocal: " + url.getProtocol());
      System.out.println("Host: " + url.getHost());
      System.out.println("File: " + url.getFile());
 
      String temp;
      BufferedReader  br = 
          new BufferedReader(new InputStreamReader(url.openStream(),"UTF-8"));
      
      while((temp=br.readLine())!=null) {
        System.out.println(temp);
      }
      br.close();
    } catch (MalformedURLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (IOException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }
 
}
 
 
 
4교시 5교시

- InetAddress Class  
  : IP주소와 관련된 여러 정보 제공 

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
package day11;
 
import java.net.InetAddress;
import java.net.UnknownHostException;
 
public class AddressTest {
 
  public static void main(String[] args) {
    try {
      InetAddress address = InetAddress.getLocalHost();
      System.out.println("로컬 컴퓨터 이름: " + address.getHostName());
      System.out.println("로컬 컴퓨터 IP: " + address.getHostAddress());
 
      address = InetAddress.getByName("java.sun.com");
      System.out.println("java.sun.com 도메인 이름과 IP주소: " + address);
 
      InetAddress sw[] = InetAddress.getAllByName("naver.com");
      for(int i=0; i<sw.length; i++) {
        System.out.println(sw[i]);
      }
      
    } catch (UnknownHostException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
 
  }
 
}
 
 
 
 - URLConnection 클래스 
    : URL을 목표지점으로 하는 네트웍 연결을 위한 작업을 수행함
 - URL객체의 스트림 생성과 URLConnection 객체의 스트림 생성 

 

4. Socket, ServerSocket 
   - ServerSocket: 클라이언트보다 먼저 실행되어 클라이언트의 접속 요청을 기다리며, 
     클라이언트가 접속하면 양방향 통신을 할 수 있는 Socket . 객체를 생성한다 
   - Socket: 다른 Socket과 데이터를 송수신 한다.

   - Network 프로그램의 운영순서 
     ⓐ Server: ServerSocket 생성 
     ⓑ Server: 포트감시 시작, Client의 접속을 기다림 
     ⓒ Client: Socket 생성시에 인자 값으로 서버의 IP, PORT를 지정,  서버에 접속 요구 
     ⓓ Server: Client의 요구를 받아 Socket 객체 생성 
     ⓔ Server: 생성된 Socket 객체를 이용해 Client에게 데이터를 보냄 
     ⓕ Client: Socket객체로 데이터를 받고 필요한 데이터를 다시 서버로 전송함 

 

5. 기본적인 소켓통신 실습 

 

서버
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
package day11;
 
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
 
public class TestServer {
  public static void main(String[] args) {
    System.out.println("***** 개발자_1 서버 프로그램 작동됨 *****");
    ServerSocket server = null;
    try {
      // 2007 포트로 ServerSocket 생성
      server = new ServerSocket(20222313);
      while (true) { // 데몬이 되기 위한 무한 루프
        System.out.println("클라이언트 접속을 대기중입니다.");
        Socket client = server.accept(); // Lock
 
        InetAddress ia = client.getInetAddress();
        int port = client.getLocalPort();// 접속에 사용된 PORT
        String ip = ia.getHostAddress(); // 원격 Client IP
        System.out.println("클라이언트 접속:" + " Local Port: " + port + " IP: " + ip);
        // 한글을 출력할 수 있습니다.
        // Client로 출력할 객체 생성
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));
 
        // 버퍼에 문자열을 기록함
        writer.write("개발자_1 서버에 접속 하신것을 환영 합니다.");
 
        // 실제로 Client로 전송함
        writer.flush();
        try {
          client.close(); // 소켓 닫음
        } catch (IOException e) {
          System.out.println("Socket을 닫는중 에러 났습니다." + e.toString());
        }
      }
    } catch (IOException ioe) {
      System.err.println("Exception generated...");
    } finally {
      try {
        server.close();
        System.out.println("서버 작동을 종료합니다.");
      } catch (IOException e) {
        System.out.println("ServerSocket을 닫는중 에러 났습니다." + e.toString());
      }
    }
    // 아무키나 누를 때까지 대기합니다.
    try {
      InputStream is = System.in;
      is.read();
    } catch (Exception e) {
 
    }
    System.out.println("서버 프로그램 실행을 종료합니다.");
  }
}
 
 
클라이언트

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
package day11;
 
import java.io.IOException;
import java.net.Socket;
 
public class TestClient {
 
  public static void main(String[] args) {
    System.out.println("클라이언트 프로그램 작동.......");
 
    Socket socket = null;
    try {
      socket = new Socket(args[0], 2022);
      System.out.println("서버에 연결 되었습니다......");
    } catch (IOException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } // 서버 접속 요청
    
  }
 
}
 
 
 
 

6교시 7교시 8교시

데이터베이스와 DBMS

MySQL 다운로드.